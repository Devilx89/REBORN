local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Vgxmod X Death Note",
    SubTitle = "by Pkgx1",
    TabWidth = 160,
    Size = UDim2.fromOffset(470, 260),
    Acrylic = false,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftAlt
})

function MakeScriptHub() 
  loadstring(game:HttpGet("https://raw.githubusercontent.com/VGXMODPLAYER68/VGXMOD-REBORN/main/Vgxmod%20X%20Death%20Note"))() --Put Your Script
end


local Tabs = {
    Info = Window:AddTab({ Title = "Info", Icon = "info" }),
    Main = Window:AddTab({ Title = "Main", Icon = "layout-dashboard" }),
    Esp = Window:AddTab({ Title = "Esp", Icon = "eye" }),
    Player = Window:AddTab({ Title = "Player", Icon = "user" }),
    
}

Tabs.Info:AddParagraph({
    Title = "Welcome to Vgxmod",
    Content = "Kindly Request Script"
})

Tabs.Info:AddButton({
    Title = "Discord",
    Description = "",
    Callback = function()
        setclipboard("https://discord.gg/n9gtmefsjc")
        Fluent:Notify({
            Title = "Vgxmod X Hub",
            Content = "Discord Link",
            SubContent = "Link copied to clipboard! Paste it in your browser.",
            Duration = 5
        })
    end
})








-- KEY SYSTEM



    
    

--// Set your key here
getgenv().Key = "Good900900"
getgenv().KeyInput = ""

-- Add paragraph to UI
Tabs.Main:AddParagraph({
    Title = "Key System",
    Content = "You must enter the correct key to access Pro features."
})

-- Input box for the key
Tabs.Main:AddInput("KeyInputBox", {
    Title = "Enter Key",
    Default = "",
    Placeholder = "Paste your key here...",
    Numeric = false,
    Finished = true,
    Callback = function(input)
        getgenv().KeyInput = input
    end
})

-- Button to get the key (Discord link)
Tabs.Main:AddButton({
    Title = "Get Key",
    Description = "Copy the key link to your clipboard.",
    Callback = function()
        setclipboard("https://discord.gg/n9gtmefsjc")
        Fluent:Notify({
            Title = "Link Copied",
            Content = "Paste it in your browser to get the key.",
            Duration = 5
        })
    end
})

-- Button to check the key
Tabs.Main:AddButton({
    Title = "Check Key",
    Description = "Verify the entered key.",
    Callback = function()
        Fluent:Notify({
            Title = "Checking Key",
            Content = "Please wait...",
            Duration = 2
        })

        task.wait(2)

        if getgenv().KeyInput == getgenv().Key then
            Fluent:Notify({
                Title = "Access Granted",
                Content = "Correct key. Loading script...",
                Duration = 2
            })

            task.wait(2)
            Fluent:Destroy()
            task.wait(1)
            MakeScriptHub()
        else
            Fluent:Notify({
                Title = "Access Denied",
                Content = "Invalid key. Please get the correct key.",
                Duration = 3
            })
        end
    end
})






-- Keys system end
    
    
    
    









local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Gamemode = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Gamemode")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Replace this with your actual notification function or UI library notify method
local function Notify(title, content, duration)
    -- Simple example using Roblox's default notification (if available)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = title,
        Text = content,
        Duration = duration or 5
    })
end

local connection

connection = Gamemode.OnClientEvent:Connect(function(data)
    if type(data) == "table" and data.Status == "DeathNoteBook" and typeof(data.Char) == "Instance" then
        local char = data.Char
        local name = "Unknown"

        if char and char:FindFirstChild("Humanoid") then
            name = char.Humanoid.DisplayName or char.Name or "Unknown"
        elseif char.Name then
            name = char.Name
        end

        Notify("Death Note", name .. " picked up the Death Note.", 5)
    end
end)











--[[




    local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

Tabs.Main:AddButton({
	Title = "Auto Get ID",
	Callback = function()
		local char = LocalPlayer.Character
		if not char or not char:FindFirstChild("HumanoidRootPart") then return end

		local hrp = char.HumanoidRootPart
		local originalCFrame = hrp.CFrame

		for _, obj in ipairs(Workspace.Map:GetDescendants()) do
			if obj:IsA("ProximityPrompt") and obj.Name == "IdPrompt" then
				local parent = obj.Parent
				local base = parent:FindFirstChildWhichIsA("BasePart") or parent
				if base and base:IsA("BasePart") then
					obj.HoldDuration = 0

					-- Silent teleport just for the frame
					hrp.CFrame = base.CFrame + Vector3.new(0, 3, 0)
					task.wait() -- wait one frame for proximity prompt to register
					
					-- Fire the prompt
					if fireproximityprompt then
						fireproximityprompt(obj)
					elseif firesignal and obj.Triggered then
						firesignal(obj.Triggered)
					end

					-- Restore position immediately
					hrp.CFrame = originalCFrame
					task.wait(0.1)
				end
			end
		end
	end
})






local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

Tabs.Main:AddButton({
    Title = "Instant ID",
    Callback = function()
        local char = LocalPlayer.Character
        if not char or not char:FindFirstChild("HumanoidRootPart") then return end

        for _, obj in ipairs(Workspace.Map:GetDescendants()) do
            if obj:IsA("ProximityPrompt") and obj.Name == "IdPrompt" then
                local base = obj.Parent:FindFirstChildWhichIsA("BasePart") or obj.Parent
                if base and (char.HumanoidRootPart.Position - base.Position).Magnitude < 10 then
                    obj.HoldDuration = 0.5
                    task.wait(0.1)
                    if fireproximityprompt then
                        fireproximityprompt(obj)
                    elseif firesignal and obj.Triggered then
                        firesignal(obj.Triggered)
                    end
                    break
                end
            end
        end
    end
})

]]



























local Players = game:GetService("Players")

local espEnabled = false
local espColor = Color3.fromRGB(255, 255, 0)
local highlights = {}

local Toggle_OrangeESP = Tabs.Esp:AddToggle("OrangeESPToggle", {
	Title = "Esp Highlight Player",
	Default = false
})

local function addESP(char, plr)
	if not espEnabled or highlights[plr] or not char then return end
	local hrp = char:FindFirstChild("HumanoidRootPart")
	if not hrp then return end

	local hl = Instance.new("Highlight")
	hl.Name = "ESP_Orange"
	hl.FillTransparency = 1
	hl.OutlineTransparency = 0
	hl.OutlineColor = espColor
	hl.Adornee = char
	hl.Parent = char

	highlights[plr] = hl
end

local function applyESP(plr)
	if plr == Players.LocalPlayer then return end

	local function onCharLoaded(char)
		task.wait(0.3)
		if highlights[plr] then
			highlights[plr]:Destroy()
			highlights[plr] = nil
		end
		addESP(char, plr)
	end

	if plr.Character then
		onCharLoaded(plr.Character)
	end

	plr.CharacterAdded:Connect(onCharLoaded)
end

Toggle_OrangeESP:OnChanged(function(state)
	espEnabled = state

	if espEnabled then
		for _, p in ipairs(Players:GetPlayers()) do
			applyESP(p)
		end
	else
		for _, hl in pairs(highlights) do
			if hl then hl:Destroy() end
		end
		table.clear(highlights)
	end
end)

Players.PlayerAdded:Connect(function(p)
	p.CharacterAdded:Connect(function(char)
		task.wait(0.3)
		if espEnabled then
			if highlights[p] then
				highlights[p]:Destroy()
				highlights[p] = nil
			end
			addESP(char, p)
		end
	end)
end)

Players.PlayerRemoving:Connect(function(p)
	if highlights[p] then
		highlights[p]:Destroy()
		highlights[p] = nil
	end
end)






local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Gamemode = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Gamemode")
local RunService = game:GetService("RunService")

local espConnections = {}
local espColorLoops = {}

Tabs.Esp:AddToggle("DeathNoteESP", {
	Title = "Esp Name Kira",
	Default = false
}):OnChanged(function(state)
	if not state then
		for _, conn in pairs(espConnections) do
			conn:Disconnect()
		end
		espConnections = {}

		for char, loop in pairs(espColorLoops) do
			if loop then loop:Disconnect() end
			if char and char:FindFirstChild("Head") then
				local gui = char.Head:FindFirstChild("DeathNoteESP")
				if gui then gui:Destroy() end
			end
		end
		espColorLoops = {}
		return
	end

	table.insert(espConnections, Gamemode.OnClientEvent:Connect(function(data)
		if typeof(data) == "table" and data.Status == "DeathNoteBook" and typeof(data.Char) == "Instance" then
			local char = data.Char
			local head = char:FindFirstChild("Head")

			if head and not head:FindFirstChild("DeathNoteESP") then
				local billboard = Instance.new("BillboardGui")
				billboard.Name = "DeathNoteESP"
				billboard.Adornee = head
				billboard.Size = UDim2.new(0, 100, 0, 30)
				billboard.AlwaysOnTop = true
				billboard.Parent = head

				local label = Instance.new("TextLabel")
				label.Size = UDim2.new(1, 0, 1, 0)
				label.BackgroundTransparency = 1
				label.TextScaled = true
				label.Font = Enum.Font.SourceSansBold
				label.Text = "[DEATH NOTE]"
				label.TextColor3 = Color3.fromHSV(0, 1, 1)
				label.Parent = billboard

				local h = 0
				espColorLoops[char] = RunService.RenderStepped:Connect(function()
					h = (h + 0.01) % 1
					label.TextColor3 = Color3.fromHSV(h, 1, 1)
				end)
			end
		end
	end))
end)



local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Gamemode = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Gamemode")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera

local lineConnections = {}
local espLines = {}

Tabs.Esp:AddToggle("DeathNoteLineESP", {
	Title = "Esp Line Kira",
	Default = false
}):OnChanged(function(state)
	for _, conn in pairs(lineConnections) do
		conn:Disconnect()
	end
	lineConnections = {}

	for _, line in pairs(espLines) do
		if line.Line then line.Line:Destroy() end
	end
	espLines = {}

	if not state then return end

	local mainConnection = Gamemode.OnClientEvent:Connect(function(data)
		if typeof(data) == "table" and data.Status == "DeathNoteBook" and typeof(data.Char) == "Instance" then
			local char = data.Char
			if espLines[char] then return end

			local line = Drawing.new("Line")
			line.Thickness = 2
			line.Transparency = 1
			line.Visible = true

			local hue = 0
			local renderConnection
			renderConnection = RunService.RenderStepped:Connect(function()
				if not char or not char:FindFirstChild("HumanoidRootPart") then
					line.Visible = false
					renderConnection:Disconnect()
					espLines[char] = nil
					line:Destroy()
					return
				end

				hue = (hue + 0.005) % 1
				line.Color = Color3.fromHSV(hue, 1, 1)

				local rootPos = char.HumanoidRootPart.Position
				local screenPos, onScreen = Camera:WorldToViewportPoint(rootPos)

				if onScreen then
					local center = Vector2.new(Camera.ViewportSize.X * 0.5, Camera.ViewportSize.Y * 0.5)
					line.From = center
					line.To = Vector2.new(screenPos.X, screenPos.Y)
					line.Visible = true
				else
					line.Visible = false
				end
			end)

			espLines[char] = {
				Line = line,
				Connection = renderConnection
			}
		end
	end)

	table.insert(lineConnections, mainConnection)
end)





local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local espEnabled = false
local idConnection
local espTags = {}

local Toggle1 = Tabs.Esp:AddToggle("EspIdToggle", {
	Title = "Esp Name ID",
	Default = false
})

Toggle1:OnChanged(function(state)
	espEnabled = state

	if espEnabled then
		idConnection = RunService.Heartbeat:Connect(function()
			for _, obj in ipairs(Workspace.Map:GetDescendants()) do
				if obj:IsA("ProximityPrompt") and obj.Name == "IdPrompt" then
					local parent = obj.Parent
					if parent and (parent:IsA("Model") or parent:IsA("Part")) then
						obj.HoldDuration = 0
						obj.Enabled = true
						if fireproximityprompt then
							fireproximityprompt(obj)
						elseif firesignal and obj.Triggered then
							firesignal(obj.Triggered)
						end
						local base = parent:FindFirstChildWhichIsA("BasePart") or parent
						if base:IsA("BasePart") and not espTags[base] then
							local billboard = Instance.new("BillboardGui")
							billboard.Name = "ESP"
							billboard.Adornee = base
							billboard.Size = UDim2.new(0, 100, 0, 30)
							billboard.StudsOffset = Vector3.new(0, 3, 0)
							billboard.AlwaysOnTop = true
							billboard.Parent = base

							local label = Instance.new("TextLabel")
							label.Size = UDim2.new(1, 0, 1, 0)
							label.BackgroundTransparency = 1
							label.Text = "ID"
							label.TextStrokeTransparency = 0
							label.Font = Enum.Font.GothamBold
							label.TextScaled = true
							label.Parent = billboard

							local renderConnection
							renderConnection = RunService.RenderStepped:Connect(function()
								if not base:IsDescendantOf(Workspace) then
									if espTags[base] then
										espTags[base].esp:Destroy()
										espTags[base].connection:Disconnect()
										espTags[base] = nil
									end
									renderConnection:Disconnect()
								elseif label and label.Parent then
									local t = tick()
									label.TextColor3 = Color3.new(
										0.5 + 0.5 * math.sin(t * 2),
										0.5 + 0.5 * math.sin(t * 2 + 2),
										0.5 + 0.5 * math.sin(t * 2 + 4)
									)
								end
							end)

							espTags[base] = {
								esp = billboard,
								connection = renderConnection
							}
						end
					end
				end
			end
		end)
	else
		if idConnection then idConnection:Disconnect() end
		for _, data in pairs(espTags) do
			if data.esp then data.esp:Destroy() end
			if data.connection then data.connection:Disconnect() end
		end
		espTags = {}
	end
end)






















Tabs.Player:AddButton({
    Title = "Instant Win Green/Red light",
    Description = "",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local rootPart = character:WaitForChild("HumanoidRootPart")

        rootPart.CFrame = CFrame.new(Vector3.new(-540.424, 92.576, 34.503))
    end
})



local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local noclipEnabled = false

local Toggle_Noclip = Tabs.Player:AddToggle("ToggleNoclip", {
    Title = "Noclip",
    Default = false
})

Toggle_Noclip:OnChanged(function(state)
    noclipEnabled = state
end)

RunService.Stepped:Connect(function()
    if noclipEnabled and LocalPlayer.Character then
        for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end
end)



Window:SelectTab(1)
